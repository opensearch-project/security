name: 'Start OpenSearch with One Plugin'
description: 'Downloads latest build of OpenSearch, installs a plugin, executes a script and then starts OpenSearch on localhost:9200'

inputs:
  opensearch-version:
    description: 'The version of OpenSearch that should be used, e.g "3.0.0"'
    required: true

  plugin-name:
    description: 'The name of the plugin to use, such as opensearch-security'
    required: true

  plugin-start-script:
    description: 'The file name for the configuration script for the plugin such as install_demo_configurations -- may not be needed for every plugin'
    required: false

  docker-host-plugin-zip:
    description: 'The name of the zip file for the plugin hosted on docker-host i.e. security-plugin.zip '
    required: true

runs:
  using: "composite"
  steps:

    # Configure longpath names if on Windows
    - name: Enable Longpaths if on Windows
      if: ${{ runner.os == 'Windows' }}
      run: git config --system core.longpaths true
      shell: pwsh

    # Download OpenSearch
    - uses: peternied/download-file@v1
      if: ${{ runner.os == 'Windows' }}
      with:
        url: https://artifacts.opensearch.org/snapshots/core/opensearch/${{ inputs.opensearch-version }}-SNAPSHOT/opensearch-min-${{ inputs.opensearch-version }}-SNAPSHOT-windows-x64-latest.zip

    # Download OpenSearch
    - uses: peternied/download-file@v1
      if: ${{ runner.os == 'Linux' }}
      with:
        url: https://artifacts.opensearch.org/snapshots/core/opensearch/${{ inputs.opensearch-version }}-SNAPSHOT/opensearch-min-${{ inputs.opensearch-version }}-SNAPSHOT-linux-x64-latest.tar.gz


    # Extract downloaded zip
    - name: Extract downloaded zip
      if: ${{ runner.os == 'Linux' }}
      run: |
        echo in base dir linux 
        ls
        tar -xzf opensearch-*.tar.gz
        rm -f opensearch-*.tar.gz
        echo after extraction
        ls
      shell: bash

    # Extract downloaded zip
    - name: Extract downloaded zip
      if: ${{ runner.os == 'Windows' }}
      run: |
        echo in base dir Windows 
        ls
        tar -xzf opensearch-min-${{ inputs.opensearch-version }}-SNAPSHOT-windows-x64-latest.zip
        del opensearch-min-${{ inputs.opensearch-version }}-SNAPSHOT-windows-x64-latest.zip
        echo after extraction
        ls
      shell: pwsh

    # Move and rename the plugin for installation
    - name: Move and rename the plugin for installation
      run: |
        echo in build
        cd build
        ls
        echo in distributions 
        cd distributions 
        ls
        echo $pwd
        cd .. 
        cd ..
        mv ./build/distributions/${{ inputs.plugin-name }}-*.zip ${{ inputs.plugin-name }}.zip 
        echo check if moved 
        ls
      shell: bash

    # Install the plugin, runs its start-script, and start the OpenSearch server
    - name: Install Plugin into OpenSearch for Linux
      if: ${{ runner.os == 'Linux'}}
      run: |
        echo in OS
        cd opensearch-${{ inputs.opensearch-version }}-SNAPSHOT
        ls
        echo in bin
        cd bin 
        ls
        cd .. 
        cd ..
        chmod +x ./opensearch-${{ inputs.opensearch-version }}-SNAPSHOT/bin/opensearch-plugin
        yes | ./opensearch-${{ inputs.opensearch-version }}-SNAPSHOT/bin/opensearch-plugin install file:$(pwd)/${{ inputs.plugin-name }}.zip
        yes, yes, no | ./opensearch-${{ inputs.opensearch-version }}-SNAPSHOT/plugins/${{ inputs.plugin-name }}/tools/${{ inputs.plugin-start-script }}
      shell: bash

    - name: Install Plugin into OpenSearch for Windows
      if: ${{ runner.os == 'Windows'}}
      run: |
        echo in OS
        cd opensearch-${{ inputs.opensearch-version }}-SNAPSHOT
        ls
        echo in bin
        cd bin 
        ls
        cd .. 
        cd ..
        'y' | .\opensearch-${{ inputs.opensearch-version }}-SNAPSHOT\bin\opensearch-plugin.bat install file:$pwd\${{ inputs.plugin-name }}.zip
        'y', 'y', 'N' | .\opensearch-${{ inputs.opensearch-version }}-SNAPSHOT\plugins\${{ inputs.plugin-name }}\tools\${{ inputs.plugin-start-script }}.bat
      shell: pwsh

    # Run OpenSearch
    - name: Run OpenSearch with plugin on Linux
      if: ${{ runner.os == 'Linux'}}
      run: .\opensearch-${{ inputs.opensearch-version }}-SNAPSHOT\bin\opensearch.sh
      shell: bash

    - name: Run OpenSearch with plugin on Windows
      if: ${{ runner.os == 'Windows'}}
      run: start .\opensearch-${{ inputs.opensearch-version }}-SNAPSHOT\bin\opensearch.bat
      shell: pwsh

    # Give the OpenSearch process some time to boot up before sending any requires, might need to increase the default time!
    - name: Sleep while OpenSearch starts
      uses: peternied/action-sleep@v1
      with:
        seconds: 30

    # Verify that the server is operational
    - name: Check OpenSearch Running on Linux
      if: ${{ runner.os != 'Windows'}}
      run: |
        docker logs ops
        curl https://localhost:9200/_cat/plugins -u 'admin:admin' -k -v
      shell: bash

    - name: Check OpenSearch Running on Windows
      if: ${{ runner.os == 'Windows'}}
      run: |
        $credentialBytes = [Text.Encoding]::ASCII.GetBytes("admin:admin")
        $encodedCredentials = [Convert]::ToBase64String($credentialBytes)
        $baseCredentials = "Basic $encodedCredentials"
        $Headers = @{ Authorization = $baseCredentials }
        Invoke-WebRequest -SkipCertificateCheck -Uri 'https://localhost:9200/_cat/plugins' -Headers $Headers;
      shell: pwsh
